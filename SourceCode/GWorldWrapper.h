#ifndef __GWORLD_WRAPPER__#define __GWORLD_WRAPPER__class GWorldWrapper{	private:		Rect dim;		int colorDepth;		int colorTableId;		CTabHandle colorTable;		PaletteHandle srcPalette;				GWorldPtr theGWorld;		BitMapHandle theBitHandle;		PixMapHandle theSrcPixMap;		//int *theYLookUp;	// lookup table for leaping through the pixMap (bitmap) to a given row		int theSrcRowBytes;				static GDHandle sOldGD;		static GWorldPtr sOldGW;				GWorldWrapper();	//Declare away			public:		GWorldWrapper(int newColorDepth, Rect theDim, int newColorTableId);	//Pass -1 in colorTableId for a NULL color table		~GWorldWrapper();				void SetGWorldWrapperWorld();		void StartUsingGWorld();		void FinishUsingGWorld();		void EraseGWorldRect();		void CopyWorldBits(Rect whereRectPtr, GrafPtr theWindow);		void CopyWorldBits(Rect whereRectPtr);		void CopyWorldBits(Rect srcRectPtr, Rect destRectPtr, GrafPtr theWindow, int transferMode = ditherCopy);				Rect GetDim()				{return dim;}		GWorldPtr GetGWorldPtr()	{return theGWorld;}		PixMapHandle GetSrcPixMap() {return theSrcPixMap;}		BitMapHandle GetSrcBitMap() {return theBitHandle;}		//int* GetYLookUp()			{return theYLookUp;}		int GetSrcRowBytes()		{return theSrcRowBytes;}				void UpdateGWorldFromRect(Rect newDim);		//void UpdateGWorldFromWindow();		//void UpdateGWorldPalette(int colorTableId);				//void AnimateColorTable(bool animateUp, bool fast);};#endif