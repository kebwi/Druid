#ifndef __CUT_CUT_INTERSECTION__#define __CUT_CUT_INTERSECTION__#include "GenericIntersection.h"class BSplineToBSplineCut;class CutCutIntersection : public GenericIntersection{	public:		CutCutIntersection(Drawing* theDrawing);		CutCutIntersection(Drawing* theDrawing, FloatPoint locInit, BSplineToBSplineCut *initCut1, BSplineToBSplineCut *initCut2,			int initCut1Index, int initCut2Index, bool initCut1IsSlice);		CutCutIntersection(CutCutIntersection& intersection, Drawing* d, BSplineToBSplineCut *initCut1, BSplineToBSplineCut *initCut2);		~CutCutIntersection();				BSplineToBSplineCut* GetCut1();		BSplineToBSplineCut* GetCut2();		BSplineToBSplineCut* GetOtherCut(BSplineToBSplineCut* cut);		int GetCut1Index();		int GetCut2Index();		bool GetCut1IsSlice();	//DEBUG only				virtual bool SelfIntersection();	//so long as cut are straight, this should always be false		virtual void FlipTopBottom();		virtual int DetermineOccludedEdge();	//-1:none, no other response		virtual bool IntersectionLegal();				virtual void DumpFileData(short fRefNum, double fileVersion);		virtual void LoadFileData(istringstream& iss, double fileVersion);				void Offset(double oH, double oV);		void DecreaseCut1Index();		void DecreaseCut2Index();		void SetNullCut(BSplineToBSplineCut* cut);		void SetCut1(BSplineToBSplineCut* theCut, int theCutIndex);		void SetCut2(BSplineToBSplineCut* theCut, int theCutIndex);		private:		CutCutIntersection() {}	//Declare away				int cut1Index, cut2Index;		BSplineToBSplineCut *cut1, *cut2;		bool cut1IsSlice;				int numNullCut1Assignments, numNullCut2Assignments;	//debug		BSplineToBSplineCut *cut1old, *cut2old;};#endif