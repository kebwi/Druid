#ifndef __GRID__#define __GRID__#include <vector.h>class GWorldWrapper;class Grid{	public:		enum GridType { RECTANGULAR_GRID, POLAR_GRID };				Grid(Point canvasSize);		Grid(const Grid& grid);		~Grid();				const Grid& operator=(const Grid& grid);				GridType GetGridType();		int GetGridSpacing();				void SetRectangularGrid();		void SetPolarGrid();				void GenerateGrid(Point canvasSize);		void DrawGrid(WindowRef window, Point canvasSize, Point scrollOffset);		void DrawPostscriptGrid(short fRefNum, Point canvasSize);				void SnapToGrid(Point& p);		bool ChangeGridSettings();			private:		GridType gridType;		long gridSpacing;		int polarSymmetry;		vector<Point> polarGridPoints;				GWorldWrapper* gww;				bool cancel;				Grid();	//Declare away				void GenerateGrid();		void GenerateRectangularGrid(Point canvasSize);		void GeneratePolarGrid(Point canvasSize);		void DrawPostscriptRectangularGrid(short fRefNum, Point canvasSize);		void DrawPostscriptPolarGrid(short fRefNum, Point canvasSize);				static pascal OSStatus GridSettingsHandler(EventHandlerCallRef nextHandler, EventRef theEvent, void* userData);};#endif