#ifndef __BSP_CUT_INTERSECTION__#define __BSP_CUT_INTERSECTION__#include "GenericIntersection.h"class BSpline;class BSplineToBSplineCut;class BspCutIntersection : public GenericIntersection{	public:		BspCutIntersection(Drawing* theDrawing);		BspCutIntersection(Drawing* theDrawing, FloatPoint locInit, BSpline *initBsp, BSplineToBSplineCut *initCut,							int initBspIndex, int initCutIndex, int initCv, int initSg, bool initBspOnTop, int initEdgeDirection,							bool initCutIsSlice = false);		BspCutIntersection(BspCutIntersection& intersection, Drawing* d, BSpline *initBsp, BSplineToBSplineCut *initCut);		~BspCutIntersection();				BSpline* GetBsp();		BSplineToBSplineCut* GetCut();		int GetBspIndex();		int GetCutIndex();		int GetCv();		int GetSg();		bool GetBspOnTop();		int GetEdgeDirection();		bool GetCutIsSlice();	//DEBUG only				virtual bool SelfIntersection();	//always false		virtual void FlipTopBottom();		virtual int DetermineOccludedEdge();	//-1:none, 1:cut_end1, 2:cut_end2		virtual int DetermineOccludedEdgeIgnoreTopBottom();	//1:cut_end1, 2:cut_end2		virtual bool IntersectionLegal();				virtual void DumpFileData(short fRefNum, double fileVersion);		virtual void LoadFileData(istringstream& iss, double fileVersion);				void Offset(double oH, double oV);		void IncreaseCurve();		void DecreaseCurve();		void IncreaseSeg(int numCrvs);		void DecreaseSeg(int numCrvs);		void DecreaseBspIndex();		void DecreaseCutIndex();		void SetCurveAndSeg(int newCv, int newSg);		void SetNullBsp();		void SetNullCut();		void SetCut(BSplineToBSplineCut* theCut, int theCutIndex);		void SetBspOnTop(bool theBspOnTop);		private:		BspCutIntersection() {}	//Declare away				BSpline *bsp;		BSplineToBSplineCut *cut;		int bspIndex;		int cutIndex;		int cv;	//Which curve of the BSpline		int seg;	//Which segment of the curve		bool bspOnTop;		int edgeDirection;		bool cutIsSlice;};#endif