#include "GenericIntersection.h"#include "Drawing.h"//******************************************************************************//Extern Globals//******************************************************************************//Global Declarationsint gA = 0;//******************************************************************************//Function Prototypes	//	In this file	//	In external files		//	main.cppvoid MyAssert(bool condition);#pragma mark -GenericIntersection::GenericIntersection(IntersectionType theType, Drawing* theDrawing, FloatPoint locInit) :	interType(theType), drawing(theDrawing), location(locInit), dtored(false), hardConstraint(false), permanentHardConstraint(false){	drawing->AddIntersection(this);}GenericIntersection::GenericIntersection(GenericIntersection& original, Drawing* d) : drawing(d){	interType = original.interType;	location = original.location;	dtored = original.dtored;	hardConstraint = original.hardConstraint;	permanentHardConstraint = original.permanentHardConstraint;		drawing->AddIntersection(this);		MyAssert(!dtored);}GenericIntersection::GenericIntersection(IntersectionType theType, Drawing* d) :	interType(theType), drawing(d), dtored(false), hardConstraint(false), permanentHardConstraint(false){}GenericIntersection::~GenericIntersection(){	gA++;	MyAssert(!dtored);		drawing->RemoveIntersection(this);		dtored = true;}int GenericIntersection::GetIntersectionIndex(){	return drawing->GetIntersectionIndex(this);}GenericIntersection::IntersectionType GenericIntersection::GetType(){	MyAssert(!dtored);	return interType;}Drawing* GenericIntersection::GetDrawing(){	MyAssert(!dtored);	return drawing;}FloatPoint GenericIntersection::GetLocation(){	MyAssert(!dtored);	return location;}bool GenericIntersection::GetDtored(){	return dtored;}bool GenericIntersection::GetHardConstraint(){	MyAssert(!dtored);	return hardConstraint;}bool GenericIntersection::GetPermanentHardConstraint(){	MyAssert(!dtored);	return permanentHardConstraint;}void GenericIntersection::SetLocation(FloatPoint newLoc){	MyAssert(!dtored);	location = newLoc;}void GenericIntersection::Offset(double oH, double oV){	MyAssert(!dtored);	location.h += oH;	location.v += oV;}void GenericIntersection::SetHardConstraint(bool hc){	MyAssert(!dtored);	hardConstraint = hc;}void GenericIntersection::SetPermanentHardConstraint(bool phc){	MyAssert(!dtored);	permanentHardConstraint = phc;}