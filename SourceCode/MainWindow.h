#ifndef __MAIN_WINDOW__#define __MAIN_WINDOW__#include "FloatPoint.h"#include <vector.h>#include <list.h>#include <time.h>#include <string>using namespace std;class GWorldWrapper;class Grid;class BSpline;class GenericIntersection;class Drawing;pascal OSStatus SimpleModalErrorDialogHandler(EventHandlerCallRef nextHandler, EventRef theEvent, void* userData);class MainWindow{	private:		struct LogData		{			int numData;			vector<long double> runningTimes, nodes;			long double rtMin, rtMax, nodesMin, nodesMax,						rtMedian, nodesMedian,						rtMean, nodesMean,						rtVar,  nodesVar,						rtSD, nodesSD,						rtSEM, nodesSEM,						rt95percentCI, nodes95percentCI;		};			public:		MainWindow(int windowRsrcId);		~MainWindow();				enum ViewMode { SPLINE_MODE, KNOT_MODE, SURFACE_MODE };		enum NudgeDir { LEFT, RIGHT, UP, DOWN };				WindowRef GetWindow();		EventHandlerRef GetMainWindowStandardEventHandler();		EventHandlerRef GetMainWindowHideEventHandler();		EventHandlerRef GetMainWindowGeneralEventHandler();		bool GetExportingPict();		Point GetCanvasSize();		Grid* GetGrid();		ControlHandle GetHscroll();		vector<BSpline*> GetWorkingObjects();		BSpline* GetHilightedObject();		GenericIntersection* GetHilightedIntersection();		int GetWorkingControlPoint();		ViewMode GetViewMode();		bool GetShowGrid();		bool GetSnapToGrid();		Point GetPointerPos();				Point CalcScrollOffset();		void GenerateGrid();				void FreezeMouseMovedEvents();		void ResumeMouseMovedEvents();				void SetMainWindowStandardEventHandler(EventHandlerRef theMainWindowStandardEventHandler);		void SetMainWindowHideEventHandler(EventHandlerRef theMainWindowHideEventHandler);		void SetMainWindowGeneralEventHandler(EventHandlerRef theMainWindowGeneralEventHandler);				void SetWorkingSplineNULL();		void SetViewMode(ViewMode vm);				void IncrementUndoStack();		void ReplaceTopOfUndoStack();		void Undo();		void Redo();				void SelectAll();		void DeselectAll();				void DeleteSelected();				void DuplicateSelected();		vector<BSpline*> DuplicateSelectedDeleteOriginals();				FloatPoint FindSelectedCenter();		void FlipHorSelected();		void FlipVerSelected();		void Rotate90CWSelected();		void Rotate90CCWSelected();		void Rotate180Selected();		static pascal OSStatus RotationHandler(EventHandlerCallRef nextHandler, EventRef theEvent, void* userData);		void RotateNumericSelected();		void RotateFreeSelected();		void ScaleNumericSelected();		void ScaleFreeSelected();				void SetRectangularGrid();		void SetPolarGrid();		void ChangeGridSettings();		void ToggleShowGrid();		void ToggleSnapToGrid();		void SetShowGrid(bool newShowGrid);		void SetSnapToGrid(bool newSnapToGrid);				void ZoomFull();		void RecalcScrollBarSizes();		void Redraw();		void RedrawControls();				void HandleMouseDown(Point where, bool doubleClick, bool shiftKey, bool controlKey, bool optionKey, bool cmdKey);		void HandleMouseMoved(Point where);		void HandleWindowBoundaryDrag();		void HandleMouseCatchUp();				void Nudge(NudgeDir dir, bool largeNudge);				void CreateBSplineFromControlPointList(vector<FloatPoint> controlPoints);				void TestStopLegalLabeling();				void CreateLegalLabeling();		void CreateLegalLabeling(vector<BSpline*> bsplines);		void StopLabelingAttempt();		void ClearLabeling();		void ClearDepths();				void ProcessData(LogData& logData);		void ToggleDataLogging();		bool GetDataLoggingOn();		void ToggleDataLogNote();		bool GetDataLogNoteInProgress();		void AppendDataLogNote(char c);		void WriteLogData(string header, string line);		void WriteSearchParametersToLog();		void AddRunningTime(long double rt, int numNodes);				void RunTests(int testType);		void RunTestsOneSearchParameters(int whichCase, int numCases, LogData& logData);		void RunPileTest();				OSErr OpenBackgroundImageFile();				void ToggleAutoPictExport();		void ExportToPict(bool promptUser = true, int mouseClickDown = 0);		void ExportToPostscript();				void OpenFromFile();		//void AutoOpenFileFromAppleEvent(EventRef theEvent);		void AutoOpenFileFromAppleEvent(const AppleEvent* theAppleEvent);		void ReadFromFile(short fRefNum);		static pascal void HandleNavEvent(NavEventCallbackMessage theCallBackSelector, NavCBRecPtr theCallBackParms, void *theCallBackUD);		void SaveToFile(bool promptForFileName);			private:		MainWindow();	//Declare away				void GrabWorkingIndexes();		void RestoreWorkingIndexes();		void MovePointersFromDrawingToDrawing(Drawing* oldD, Drawing* newD);				void HandleScrollBar(ControlHandle theControl, Point where);		static pascal void WindowScrollBarProc(ControlHandle theControl, short partCode);				void HandleIllegalLabeling(bool doStep1, bool doStep2, Drawing* backup);		void HandleHandTool(bool doubleClick, bool shiftKey, bool controlKey, bool optionKey, bool cmdKey);		bool HandleIntersectionChanges(BSpline* bsp, vector<BSpline*>& bsplineIntersDeleted, bool forceToTop, bool cmdKey, bool dontProjectAnyInters = false);		void BackupCurvePoints(BSpline* bsp);		void HandleClickOnControlPoint(BSpline *bsp, Point where, int controlPoint, bool doubleClick, bool shiftKey, bool controlKey, bool optionKey, bool cmdKey);		void HandleClickOnIntersectionPoint(Point where, int intersectionPoint, bool doubleClick, bool shiftKey, bool controlKey, bool optionKey, bool cmdKey);		void HandleClickOnBoundary(BSpline *bsp, Point where, int controlBoundarySegment, bool doubleClick, bool shiftKey, bool controlKey, bool optionKey, bool cmdKey);		void HandleClickOnCurve(BSpline *bsp, Point where, int curveSegment, bool doubleClick, bool shiftKey, bool controlKey, bool optionKey, bool cmdKey);		void HandleClickInOpenSpace(Point where, bool doubleClick, bool shiftKey, bool controlKey, bool optionKey, bool cmdKey);		void HandleExistingControlPoint(int controlPoint, bool cmdKey);				void FinishInProgressBSpline(BSpline* bsp);		void DeleteControlPoint(BSpline* bsp, int controlPoint, bool deleteAllControlPoints);		void ChangeBSplineDegree(BSpline* bsp, bool incrementDegree);		void ChangeControlPoint(BSpline* bsp, int controlPoint, bool moveAllControlPoints);				bool FlipIntersection(int intersectionPoint);		void ToggleIntersectionPermanentContraint(int intersectionPoint, bool toggleCompSet);		void SplitControlBoundarySegment(BSpline* bsp, int controlBoundarySegment, Point newControlPointPos);		void FlipSignOfOcclusion(BSpline* bsp);				void SelectBSpline(BSpline* bsp, int controlPoint, bool dontWipeList);				void CreateNewBSpline(Point firstControlPointPos);		void DeleteBSpline(BSpline* bsp);				void SnapToGrid(Point& p);				void ChangeObjectReflectance(BSpline* bsp, Point where);	public:		void DrawGrid();	private:		void WritePostscriptHeader(short fRefNum);		void WritePostscriptTailer(short fRefNum);		void PaintPostscriptBackgroundCanvas(short fRefNum);				void DoNonSuperSplineIntersectionClickError();		void DoNonSuperSplineOrNewSplineOpenSpaceClickError();				Handle CreateOpenHandle(OSType theApplicationSignature, short theNumTypes, const OSTypePtr theTypeList);		OSErr GetOneFileWithPreview(short numTypes, OSType openTypeList[], FSSpecPtr theFSSpecPtr, void *theFilterProc);		OSErr PutPictToFile(PicHandle thePicture, bool promptUser);		OSErr GetAppFSSpec(FSSpec *myAppSpec);				FSSpecPtr documentFSSpec;				bool dataLoggingOn;		string* dataLogNote;		int dataLogTextV;		vector<pair<long double, int> > runningTimesAndNodes;				vector<int> testIntersectionIndexes;				WindowRef window;		ViewMode viewMode;		Grid* grid;		bool showGrid;		bool snapToGrid;				GWorldWrapper* backgroundImageGWW;				bool exportingPict;		bool autoExportPict;		struct MouseClick		{			Point loc;			bool doubleClick;			int age;		};		list<MouseClick> mouseClicks;				vector<int> workingBSplineIndexes;		vector<BSpline*> workingBSplines;		int hilightedBSplineIndex;		BSpline* hilightedBSpline;		int hilightCode;	//What part of a BSpline is triggering the hilighting (control point, boundary, curve, etc.)		int hilightedIntersectionIndex;		FloatPoint hilightedIntersectionLoc;		GenericIntersection* hilightedIntersection;		int workingControlPoint;		EventLoopTimerRef windowBoundaryDragTimer;		EventLoopTimerRef mouseCatchUpTimer;		bool moveAllControlPoints;		Point lastWhere;		Point lastDroppedControlPointLoc;		Point lastPointerPos;				vector<Drawing*> undoStack;		int undoStackPos;				Point canvasSize;		ControlHandle hScroll, vScroll;		static int previousScrollValue;		double maxAllowedDelta;				bool mouseMovedEventsFrozen;				clock_t timeOfLastUserMotion;		bool labelPending;		EventLoopTimerRef labelingAttemptPendingTimer;				EventHandlerRef mainWindowStandardEventHandler, mainWindowHideEventHandler, mainWindowGeneralEventHandler;};#endif