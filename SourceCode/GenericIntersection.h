#ifndef __GENERIC_INTERSECTION__#define __GENERIC_INTERSECTION__#include "FloatPoint.h"#include <sstream>using namespace::std;class Drawing;class GenericIntersection{	public:		enum IntersectionType { BSP_BSP, BSP_CUT, BSP_CUT_T, CUT_CUT };				//No public ctors		virtual ~GenericIntersection();				int GetIntersectionIndex();		IntersectionType GetType();		Drawing* GetDrawing();		FloatPoint GetLocation();		bool GetDtored();		bool GetHardConstraint();		bool GetPermanentHardConstraint();				void SetLocation(FloatPoint newLoc);		void Offset(double oH, double oV);		void SetHardConstraint(bool hc);		void SetPermanentHardConstraint(bool phc);				virtual void DumpFileData(short fRefNum, double fileVersion) = 0;		virtual void LoadFileData(istringstream& iss, double fileVersion) = 0;				virtual bool SelfIntersection() = 0;		virtual void FlipTopBottom() = 0;		virtual int DetermineOccludedEdge() = 0;		virtual bool IntersectionLegal() = 0;			protected:		GenericIntersection();	//Declare away (except for derived classes)		GenericIntersection(IntersectionType theType, Drawing* theDrawing, FloatPoint locInit);		GenericIntersection(GenericIntersection& original, Drawing* d);		GenericIntersection(IntersectionType theType, Drawing* d);				bool dtored;		Drawing* drawing;		FloatPoint location;			private:				IntersectionType interType;		bool hardConstraint, permanentHardConstraint;};#endif