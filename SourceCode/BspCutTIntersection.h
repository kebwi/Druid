#ifndef __BSP_CUT_T_INTERSECTION__#define __BSP_CUT_T_INTERSECTION__#include "GenericIntersection.h"class BSpline;class BSplineToBSplineCut;class WholeObject;class BspCutTIntersection;class less<BspCutTIntersection*>;//******************************************************************************//Function Prototypes	//	In this file	//	In external files		//	main.cppvoid MyAssert(bool condition);#pragma mark -class BspCutTIntersection : public GenericIntersection{	friend less<BspCutTIntersection*>;		public:		BspCutTIntersection(Drawing* theDrawing);		BspCutTIntersection(Drawing* theDrawing, FloatPoint locInit, BSpline *initBsp, BSplineToBSplineCut *initCut,							int initBspIndex, int initCutIndex, int initCv, int initCvSg, int initInfiniteWOsection, int initEdgeDirection, bool initInterAtStart);		BspCutTIntersection(BspCutTIntersection& intersection, Drawing* d, BSpline *bspinit, BSplineToBSplineCut *initCut);		~BspCutTIntersection();				BSpline* GetBsp();		BSplineToBSplineCut* GetCut();		WholeObject* GetInfiniteWholeObject();		int GetBspIndex();		int GetCutIndex();		int GetWOIndex();		int GetCv();		int GetSg();		int GetInfiniteWOsection();		int GetEdgeDirection();		bool GetAtStart();				virtual bool SelfIntersection();	//always false		virtual void FlipTopBottom();	//Doesn't do anything		virtual int DetermineOccludedEdge();	//0:none, no other response		virtual bool IntersectionLegal();				virtual void DumpFileData(short fRefNum, double fileVersion);		virtual void LoadFileData(istringstream& iss, double fileVersion);				void SetAtStart(bool atStart);		void RecalcStartEndLocs();		void SetLocToCutStartOrEndLoc();		void RecalcEdgeDirection();				void Offset(double oH, double oV);		void IncreaseCurve();		void DecreaseCurve();		void IncrementInfiniteWOsection();		void DecreaseBspIndex();		void DecreaseCutIndex();		void SetCurveAndSeg(int newCv, int newSg);		void SetInfiniteWOsection(int newInfiniteWOsection);		void SetNullBsp();		void SetNullCut();		void SetCut(BSplineToBSplineCut* theCut, int theCutIndex);		void SetInfiniteWholeObject(WholeObject* wo);			private:		BspCutTIntersection() {}	//Declare away				BSpline *bsp;		BSplineToBSplineCut *cut;		WholeObject* infiniteWholeObject;	//Used for BspCutT inters on infinite BSplines		int bspIndex;		int cutIndex;		int cv;	//Which curve of the BSpline		int seg;	//Which segment of the curve		int infiniteWOsection;	//Of all T junctions on the same infinite bspline, where is this one in the vertically sorted list of T junctions		int edgeDirection;		bool interAtStart;	//If false, then intersection is at cut end};//Sorts in decending order, highest location V first, then down toward 0struct less<BspCutTIntersection*>{	bool operator()(BspCutTIntersection const* o1, BspCutTIntersection const* o2)	{		MyAssert(!o1->dtored && !o2->dtored);		return (o1->location.v > o2->location.v);	}};#endif