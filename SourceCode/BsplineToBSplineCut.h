#ifndef __BSPLINE_TO_BSPLINE_CUT__#define __BSPLINE_TO_BSPLINE_CUT__#include "MainWindow.h"#include "FloatPoint.h"#include <vector.h>#include <utility.h>	//for pair#include <sstream>using namespace::std;class BSpline;class GenericIntersection;class BspCutTIntersection;class Drawing;class BSplineToBSplineCut{	public:		BSplineToBSplineCut(Drawing* theDrawing, BSpline* initBsp1, BSpline* initBsp2,							int initCv1, int initSg1, int initCv2, int initSg2, int initSectionDepth);		BSplineToBSplineCut(BSplineToBSplineCut& cut, Drawing* theDrawing);		BSplineToBSplineCut(Drawing* theDrawing);		~BSplineToBSplineCut();				void AddIntersection(GenericIntersection* intersection, bool equalizeSections = true, bool reweave = true);		void RemoveIntersection(GenericIntersection* intersection, bool equalizeSections = true, bool reweave = true);				int GetCutIndex();		vector<GenericIntersection*> GetIntersections();		BSpline* GetBsp1();		BSpline* GetBsp2();		int GetCv1();		int GetCv2();		int GetSg1();		int GetSg2();		FloatPoint GetStart();		FloatPoint GetEnd();		FloatPoint GetPrevStart();		FloatPoint GetPrevEnd();		int GetNumIntersections();		GenericIntersection* GetFirstIntersection();		GenericIntersection* GetLastIntersection();		int GetArbitraryPointDepth(FloatPoint interLoc);		int GetSectionDepthBeforeIntersection(GenericIntersection* intersection);		int GetSectionDepthAfterIntersection(GenericIntersection* intersection);		int GetMaxPossibleSectionDepthBeforeIntersection(GenericIntersection* intersection);		int GetMaxPossibleSectionDepthAfterIntersection(GenericIntersection* intersection);		vector<int>* GetSectionDepths();		int GetMinIntersectionGap();		bool GetSectionDepthConstraintBeforeIntersection(GenericIntersection* intersection);		bool GetSectionDepthConstraintAfterIntersection(GenericIntersection* intersection);		int GetIntersectionIndex(GenericIntersection* intersection);		bool GetAllSectionsConstrained();		bool GetAllIntersectionsLegal(bool assertIt = false);		GenericIntersection* FindPrevIntersection(GenericIntersection* intersection);		GenericIntersection* FindNextIntersection(GenericIntersection* intersection);				void Invert();				void InitSectionDepths(int sectionZeroDepth);				void IncreaseCurveStart();		void IncreaseCurveEnd();		void DecreaseCurveStart();		void DecreaseCurveEnd();				void SetSectionDepthBeforeIntersection(GenericIntersection* intersection, int depth);		void SetSectionDepthAfterIntersection(GenericIntersection* intersection, int depth);		void SetSectionDepthConstraintBeforeIntersection(GenericIntersection* intersection, bool value);		void SetSectionDepthConstraintAfterIntersection(GenericIntersection* intersection, bool value);		void InitSectionMaxPossibleDepths();		bool IncrementMaxPossibleSectionDepthBeforeIntersection(GenericIntersection* intersection, int depth);		bool IncrementMaxPossibleSectionDepthAfterIntersection(GenericIntersection* intersection, int depth);		void SetAllSectionsNoHardConstraint();		void PushPullCut(int depthChange);				void MakeAllDepthsZero();				void ReweaveCut();		void ProjectIntersections(BSpline* bsp, BSplineToBSplineCut* cut);		bool ProjectIntersections(vector<GenericIntersection*>& alreadyProjectedInters);		bool FindAndAddNewIntersections(vector<BSpline*> bsplines, vector<BSplineToBSplineCut*> cuts);				void DrawCut(RGBColor color, MainWindow::ViewMode viewMode, Point scrollOffset, bool showDepths);		void DrawPostscriptCut(short fRefNum, RGBColor color, MainWindow::ViewMode viewMode, Point canvasSize, bool showDepths);				void DumpFileData(short fRefNum);		void LoadFileData(istringstream& iss, double fileVersion);				void SetBSplines(BSpline* theBsp1, BSpline* theBsp2);		void SetCurvesAndSegs(int newCv1, int newSg1, int newCv2, int newSg2);		void NullAllBspsAndCuts();				void VerifyBackupsMatchPresent();		void VerifyNothingDtored();		void BackupStartEndLocs();		void RecalcStartEndLocs();		void RecalcStartLoc();		void RecalcEndLoc();				//int DetermineStartOrEnd(BspCutTIntersection* inter);	//0:start, 1:end				bool dtored;	//DEBUG only		private:		BSplineToBSplineCut();	//Declare away				int GetSectionBeforeIntersection(GenericIntersection* intersection);		int GetSectionAfterIntersection(GenericIntersection* intersection);				void ProjectBspCutIntersection(GenericIntersection* intersection, vector<GenericIntersection*>& deleteIntersections,										vector<pair<GenericIntersection*, double> >& distIntersMoved);		void GetIntersectionSegmentPoints(GenericIntersection* intersection, int& seg, int& segOld,										FloatPoint& pA1post, FloatPoint& pA2post, FloatPoint& pA1pre, FloatPoint& pA2pre);		bool DetermineSearchDirection(FloatPoint newLoc,										FloatPoint pA1pre, FloatPoint pA2pre, FloatPoint pA1post, FloatPoint pA2post, 										double lineSegInter1pre, double lineSegInter2pre,										int& searchDir);		int SwitchSegments(GenericIntersection* intersection, double lineSegInter1post,									int cv1bk, int sg1bk, int cv2bk, int sg2bk,									FloatPoint& pA1post, FloatPoint& pA2post,									int& seg, bool& noIntersectionFound, int& curveEndWrap);		void ChangeCurves(GenericIntersection* intersection,							int seg, int segOld,							int curveEndWrap);				void ProjectBspCutTIntersection(GenericIntersection* intersection);				void ProjectCutCutIntersection(GenericIntersection* intersection, vector<GenericIntersection*>& deleteIntersections);				Drawing* drawing;		BSpline *bsp1, *bsp2;		int cv1, cv2;		int sg1, sg2;		//The exact endpoints of the cut will always be		//the midpoint of the curve segments specified		FloatPoint startLoc, endLoc;		FloatPoint prevStartLoc, prevEndLoc;				vector<GenericIntersection*> intersections;		vector<int> sectionDepths;		vector<int> maxPossibleSectionDepths;		vector<bool> sectionDepthConstraints;};#endif