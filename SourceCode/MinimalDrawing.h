#ifndef __MINIMAL_DRAWING__#define __MINIMAL_DRAWING__#include <vector.h>class Drawing;class MinimalDrawing{	public:		MinimalDrawing(Drawing* drawing);		~MinimalDrawing();				void WriteMinimalDrawing();		void TransferToDrawing(Drawing* drawing);		private:		MinimalDrawing();	//Declare away				void TransferFromDrawing(Drawing* drawing);				int numBSplines;		int numBSplinesAndCuts;				//Array of arrays.  First level arrays are list of BSplines followed by list of Cuts.		//Second level arrays are individual intersections or individual sections.				//BspBsp and BspCut: 4 bytes:               [........][........][0000000.][0000000.]			//Cross Boundary Index (0 - 255) --------^^^^^^^^  ^^^^^^^^  ^^^^^^^^  ^^^^^^^^			//Cross Boundary Inter Index (0 - 255) ----------------'        |   |     |   |			//Unused (always 0s) -------------------------------------------'   |     |   |			//Boolean this BSpline on top (0 or 1) -----------------------------'     |   |			//Unused (always 0s) -----------------------------------------------------'   |			//Boolean inter constrained (0 or 1) -----------------------------------------'				//BspCutT: 4 bytes:                         [........][........][........][0000000.]			//BSpline Index (0 - 255) ---------------^^^^^^^^  ^^^^^^^^  ^^^^^^^^  ^^^^^^^^			//Inter Index (0 - 255) -------------------------------'         |        |   |			//Cut Index (0 - 255) -------------------------------------------'        |   |			//Unused (always 0s) -----------------------------------------------------'   |			//Boolean at Cut start -------------------------------------------------------'		unsigned long** intersections;		unsigned char** sections;	//One byte per section to store section depth				vector<vector<unsigned long> > intersectionsV;		vector<vector<unsigned long> > sectionsV;};#endif