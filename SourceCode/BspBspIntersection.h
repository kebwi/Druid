#ifndef __BSP_BSP_INTERSECTION__#define __BSP_BSP_INTERSECTION__#include "GenericIntersection.h"class BSpline;class BspBspIntersection : public GenericIntersection{	public:		BspBspIntersection(Drawing* theDrawing);		BspBspIntersection(Drawing* theDrawing, FloatPoint locInit, BSpline *bsp1init, BSpline *bsp2init,							int initBsp1index, int initBsp2index, int initCv1, int initCv2, int initCvSg1, int initCvSg2);		BspBspIntersection(BspBspIntersection& intersection, Drawing* d, BSpline *bsp1init, BSpline *bsp2init);		~BspBspIntersection();				BSpline* GetBsp1();		BSpline* GetBsp2();		BSpline* GetOtherBsp(BSpline* bsp);		int GetBsp1Index();		int GetBsp2Index();		int GetCv1();		int GetCv2();		int GetSg1();		int GetSg2();				virtual bool SelfIntersection();		virtual void FlipTopBottom();		virtual int DetermineOccludedEdge();	//1:cv1end1, 2:cv1end2, 3:cv2end1, 4:cv2end2		virtual bool IntersectionLegal();				virtual void DumpFileData(short fRefNum, double fileVersion);		virtual void LoadFileData(istringstream& iss, double fileVersion);				void TestForAdjacentSegments();	//еее DEBUG ONLY		void Offset(double oH, double oV);		void IncreaseCurve(BSpline *bsp, int curve);		void DecreaseCurve(BSpline *bsp, int curve);		void IncreaseSeg(BSpline *bsp, int numCrvs, int cv = -1, int sg = -1);		void DecreaseSeg(BSpline *bsp, int numCrvs, int cv = -1, int sg = -1);		void DecreaseBsp1index();		void DecreaseBsp2index();		void SetCurvesAndSegs(int newCv1, int newSg1, int newCv2, int newSg2);		void SetNullBsp(BSpline *bsp);		void SetDeleteDir1(int value);		void SetDeleteDir2(int value);		private:		BspBspIntersection() {}	//Declare away				BSpline *bsp1, *bsp2;		int bsp1index, bsp2index;		int cv1, cv2;	//Which curves of the BSplines		int seg1, seg2;	//Which segments of the curves		int deleteDir1, deleteDir2;	//1 or -1...or 0 for neither.  Used to tell BSpline whether to remove section before or after intersection when intersection is deleted.};#endif